// rem(20px 10px) == 2rem 1rem
@function rem($values) {
  $remValues: '';
  $max: length($values);

  @each $value in $values {
    $i: index($values, $value);
    $remValues: #{$remValues + px-to-rem($value)};

    @if $i < $max {
      $remValues: #{$remValues + ' '};
    }
  }

  @return $remValues;
}

// px-to-rem(16px) == 1.6rem
@function px-to-rem($targetpx) {
  @return ($targetpx/10px) + 0rem; // stylelint-disable
}

// rem(16px) == 1.6rem
@function _rem($val) {
  @return ($val/10px) + 0rem;
}

// px(1.6rem) == 1.6rem
@function _px($targetrem) {
  @return parseInt($targetrem) * 10px;
}

@function _vw($val) {
    @if unit($val) == "rem" {
        $val: px($val);
    }
    $vw-context: (1000 * 0.01) + 0px;
    @return ($val/$vw-context) + 0vw;
}


/* -------------------------------------------- */


@mixin karbon() {
    font-family: $font-main;
}

@mixin proxima() {
    font-family: $font-body;
}


/* -------------------------------------------- */


@mixin img-fluid() {
    max-width: 100%;
    width: 100%;
    height: auto;
}

@mixin cover() {
    content: "";
    position: absolute;
    display: block;
    width: 100%;
    height: 100%;
    left: 0;
    top: 0;
}

@mixin img-cover() {
    bottom: 0;
    left: 50%;
    min-height: 100%;
    min-width: 100%;
    position: absolute;
    right: 0;
    top: 50%;
    transform: translate(-50%, -50%);
    width: auto;
    max-width: unset;
    height: unset;
}

@mixin absolute-center() {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

@mixin no-select() {
    -webkit-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
    pointer-events: none;
}

@mixin bold() {
    font-weight: $font-weight-bold;
}

@mixin normal() {
    font-weight: $font-weight-normal;
}

@mixin light() {
    font-weight: $font-weight-light;
}

.hidden {
    visibility: hidden;
}

.visbile {
    visibility: visible;
}


/* -------------------------------------------- */

@mixin _col($val:flex) {
    position: relative;
    @if $val == flex {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
    }
    @else if $val == auto {
        flex: 0 0 auto;
        width: auto;
        max-width: none;
    }
    @else {
        width: 100%;
        flex: 0 0 percentage($val / 12);
        max-width: percentage($val / 12);
    }
}

@mixin _prop($prop-name, $val) {
    @if $prop-name == "col" {
        @include _col($val);
    }
    @else if $prop-name == "offset" {
        $num: $val / 12;
        margin-left: if($num == 0, 0, percentage($num));
    }
    @else {
        @each $prop in $prop-name {
            #{$prop}: $val;
        }
    }
}

@mixin _property($br, $prop-name, $val) {

    // Test what media breakpoint mixin to use.
    // e.g. sm_only
    @if (str-index($br, "only")) {
        $br: str-slice($br, 1, 2);
        @include media-breakpoint-only($br) {
            @include _prop($prop-name, $val);
        }
    }
    // e.g. sm_down
    @else if (str-index($br, "down")) {
        $br: str-slice($br, 1, 2);
        @include media-breakpoint-down($br) {
            @include _prop($prop-name, $val);
        }
    }
    @else {
        @include media-breakpoint-up($br) {
            @include _prop($prop-name, $val);
        }
    }
}

@mixin styling($prop-name, $args, $val, $sides: 0) {
    // If second property is an array map then style with breakpoints
    @if type-of($args) == map {
        @each $br, $val in $args {
            @include _property($br, $prop-name, $val);
        }
    }
    // Test if first argument is a breakpoint or css value
    // If breakpoint not provided, set default to xs
    @else {
        // $br: $args;
        // @if contains((xs,sm,md,lg,xl), $br) != true {
            $br: xs;
            $val: $args;
        // }
        @include _property($br, $prop-name, $val);
    }
}

/* -------------------------------------------- */

@mixin padding($args, $val:0) {
    @include styling("padding", $args, $val);
}

@mixin padding-x($args, $val:0) {
    @include styling(("padding-left", "padding-right"), $args, $val);
}

@mixin padding-y($args, $val:0) {
    @include styling(("padding-top", "padding-bottom"), $args, $val);
}

@mixin padding-left($args, $val:0) {
    @include styling("padding-left", $args, $val);
}

@mixin padding-right($args, $val:0) {
    @include styling("padding-right", $args, $val);
}

@mixin padding-bottom($args, $val:0) {
    @include styling("padding-bottom", $args, $val);
}

@mixin padding-top($args, $val:0) {
    @include styling("padding-top", $args, $val);
}

/* -------------------------------------------- */

@mixin margin($args, $val:0) {
    @include styling("margin", $args, $val);
}

@mixin margin-x($args, $val:0) {
    @include styling(("margin-left", "margin-right"), $args, $val);
}

@mixin margin-y($args, $val:0) {
    @include styling(("margin-top", "margin-bottom"), $args, $val);
}

@mixin margin-left($args, $val:0) {
    @include styling("margin-left", $args, $val);
}

@mixin margin-right($args, $val:0) {
    @include styling("margin-right", $args, $val);
}

@mixin margin-bottom($args, $val:0) {
    @include styling("margin-bottom", $args, $val);
}

@mixin margin-top($args, $val:0) {
    @include styling("margin-top", $args, $val);
}

/* -------------------------------------------- */

@mixin border($args, $val:0) {
    @include styling("border", $args, $val);
}

@mixin border-x($args, $val:0) {
    @include styling(("border-left", "border-right"), $args, $val);
}

@mixin border-y($args, $val:0) {
    @include styling(("border-top", "border-bottom"), $args, $val);
}

@mixin border-left($args, $val:0) {
    @include styling("border-left", $args, $val);
}

@mixin border-right($args, $val:0) {
    @include styling("border-right", $args, $val);
}

@mixin border-bottom($args, $val:0) {
    @include styling("border-bottom", $args, $val);
}

@mixin border-top($args, $val:0) {
    @include styling("border-top", $args, $val);
}

/* -------------------------------------------- */

@mixin font-size($args, $val:0) {
    @include styling("font-size", $args, $val);
}

@mixin font-weight($args, $val:0) {
    @include styling("font-weight", $args, $val);
}

@mixin line-height($args, $val:0) {
    @include styling("line-height", $args, $val);
}

@mixin text-align($args, $val:0) {
    @include styling("text-align", $args, $val);
}

/* -------------------------------------------- */

@mixin col($args, $val:0) {
    @include styling("col", $args, $val);
}

@mixin offset($args, $val:0) {
    @include styling("offset", $args, $val);
}

@mixin order($args, $val:0) {
    @include styling("order", $args, $val);
}

@mixin justify-content($args, $val:0) {
    @include styling("justify-content", $args, $val);
}

@mixin align-items($args, $val:0) {
    @include styling("align-items", $args, $val);
}

@mixin flex-direction($args, $val:0) {
    @include styling("flex-direction", $args, $val);
}

/* -------------------------------------------- */

@mixin width($args, $val:0) {
    @include styling("width", $args, $val);
}

@mixin min-width($args, $val:0) {
    @include styling("min-width", $args, $val);
}

@mixin height($args, $val:0) {
    @include styling("height", $args, $val);
}

@mixin min-height($args, $val:0) {
    @include styling("min-height", $args, $val);
}

/* -------------------------------------------- */

@mixin position($args, $val:0) {
    @include styling("position", $args, $val);
}

@mixin left($args, $val:0) {
    @include styling("left", $args, $val);
}

@mixin right($args, $val:0) {
    @include styling("right", $args, $val);
}

@mixin top($args, $val:0) {
    @include styling("top", $args, $val);
}

@mixin bottom($args, $val:0) {
    @include styling("bottom", $args, $val);
}

@mixin display($args, $val:0) {
    @include styling("display", $args, $val);
}

@mixin transform($args, $val:0) {
    @include styling("transform", $args, $val);
}

/* -------------------------------------------- */

@mixin shadow($args, $val:0) {
    @include styling("box-shadow", $args, $val);
}

@mixin background($args, $val:0) {
    @include styling("background", $args, $val);
}

@mixin background-size($args, $val:0) {
    @include styling("background-size", $args, $val);
}

@mixin color($args, $val:0) {
    @include styling("color", $args, $val);
}

@mixin radius($args, $val:0) {
    @include styling("border-radius", $args, $val);
}

/* -------------------------------------------- */

@mixin fade-edge($color, $side:"top") {
	position: absolute;
    @include no-select();
    z-index: 10;
    opacity: 1;

	@if $side == "top" or $side == "bottom" {
			background-image: linear-gradient(to top, $color 0%, rgba($color, 0) 100%);
			width: 100%;
			height: 10vw;
	}

	@if $side == "left" or $side == "right" {
		background-image: linear-gradient(to left, $color 0%, rgba($color, 0) 100%);
		width: 10vw;
		height: 100%;
	}

	@if $side == "top" {
		top: -1px;
		left: 0;
		transform: rotate(180deg);
	}

	@if $side == "bottom" {
		bottom: -1px;
		left: 0;
	}

	@if $side == "left" {
		top: 0;
		left: -1px;
		transform: rotate(180deg);
	}

	@if $side == "right" {
		top: 0;
		right: -1px;
	}
}

/* -------------------------------------------- */